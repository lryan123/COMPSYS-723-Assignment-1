#include <stdio.h>
#include <stdlib.h>
#include "sys/alt_irq.h"
#include "system.h"
#include "io.h"
#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include <altera_avalon_pio_regs.h>




#include "FreeRTOS/FreeRTOS.h"
#include "FreeRTOS/task.h"
#include "FreeRTOS/queue.h"
#include "FreeRTOS/semphr.h"

// Definition of Task Stacks
#define TASK_STACKSIZE 2048
#define SEVEN_SEG_BASE 0x43104

// Definition of Task Priorities
#define PRINT_STATUS_TASK_PRIORITY
#define FREQMONITOR_TASK_PRIORITY 4
#define MAINTENANCE_TASK_PRIORITY 1
#define LOADCTRL_TASK_PRIORITY 3
#define VGADISPLAY_TASK_PRIORITY 5
#define SWITCHPOLLING_TASK 2

// Definition of Message Queue
#define MSG_QUEUE_SIZE 30
QueueHandle_t msgqueue;

// used to delete a task
TaskHandle_t xHandle;

// Definition of Semaphore
SemaphoreHandle_t shared_resource_sem;

// globals variables
unsigned int number_of_messages_sent = 0;
unsigned int number_of_messages_received_task1 = 0;
unsigned int number_of_messages_received_task2 = 0;
unsigned int getsem_task1_got_sem = 0;
unsigned int getsem_task2_got_sem = 0;
char sem_owner_task_name[20];

// Local Function Prototypes
int initOSDataStructs(void);
int initCreateTasks(void);

//For frequency plot
#define FREQPLT_ORI_X 101		//x axis pixel position at the plot origin
#define FREQPLT_GRID_SIZE_X 5	//pixel separation in the x axis between two data points
#define FREQPLT_ORI_Y 199.0		//y axis pixel position at the plot origin
#define FREQPLT_FREQ_RES 20.0	//number of pixels per Hz (y axis scale)

#define ROCPLT_ORI_X 101
#define ROCPLT_GRID_SIZE_X 5
#define ROCPLT_ORI_Y 259.0
#define ROCPLT_ROC_RES 0.5		//number of pixels per Hz/s (y axis scale)

#define MIN_FREQ 45.0 //minimum frequency to draw

#define PRVGADraw_Task_P      (tskIDLE_PRIORITY+1)
TaskHandle_t PRVGADraw;


static QueueHandle_t Q_freq_data;

typedef struct{
	unsigned int x1;
	unsigned int y1;
	unsigned int x2;
	unsigned int y2;
}Line;

#define PGFlash_Task_P (tskIDLE_PRIORITY+1)
TaskHandle_t PGFlash;
/* --- VGA display --- */

void PRVGADraw_Task(void *pvParameters ){

	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
	if(pixel_buf == NULL){
		printf("can't find pixel buffer device\n");
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
	if(char_buf == NULL){
		printf("can't find char buffer device\n");
	}
	alt_up_char_buffer_clear(char_buf);

	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
	alt_up_char_buffer_string(char_buf, "46", 10, 22);

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);


	double freq[100], dfreq[100];
	int i = 99, j = 0;
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
			xQueueReceive( Q_freq_data, freq+i, 0 );

			//calculate frequency RoC

			if(i==0){
				dfreq[0] = (freq[0]-freq[99]) * 2.0 * freq[0] * freq[99] / (freq[0]+freq[99]);
			}
			else{
				dfreq[i] = (freq[i]-freq[i-1]) * 2.0 * freq[i]* freq[i-1] / (freq[i]+freq[i-1]);
			}
			if (dfreq[i] > 100.0){
				dfreq[i] = 100.0;
			}
			i =	++i%100; //point to the next data (oldest) to be overwritten

		}

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
			if (((int)(freq[(i+j)%100]) > MIN_FREQ) && ((int)(freq[(i+j+1)%100]) > MIN_FREQ)){
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j)%100] - MIN_FREQ));

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j+1)%100] - MIN_FREQ));

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j)%100]);

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j+1)%100]);

				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}
		vTaskDelay(10);

	}
}

/* --- Frequency Relay --- */
void freq_relay(){
	#define SAMPLING_FREQ 16000.0
	double temp = SAMPLING_FREQ/(double)IORD(FREQUENCY_ANALYSER_BASE, 0);

	xQueueSendToBackFromISR( Q_freq_data, &temp, pdFALSE );

	return;
}

void PGFlash_Task(void *pvParameters ){
	while(1){

		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x55);
		vTaskDelay(500); //delay for 500 milliseconds
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0xaa);
		vTaskDelay(500);
	}
}

/* --- RTOS Tasks --- */
/*
void freq_monitor_task(void* pvParameters){
	while(1){

	}
}

void load_ctrl_task(void* pvParameters){
	while(1){

	}
}

void maintenance_task(void* pvParameters){
	while(1){

	}
}

void switch_polling_task(void* pvParameters){
	while(1){

	}
}

void vga_display_task(void* pvParameters){
	while(1){

	}
}

int initOSDataStructs(void) {
	msgqueue = xQueueCreate( MSG_QUEUE_SIZE, sizeof( void* ) );
	//defining the lcd semaphore here
	shared_lcd_sem = xSemaphoreCreateCounting(9999, 1);
	return 0;
}

int initCreateTasks(void) {
	xTaskCreate(freq_monitor_task, "freq_monitor_task", TASK_STACKSIZE, NULL,FREQMONITOR_TASK_PRIORITY, NULL);
	xTaskCreate(load_ctrl_task, "load_ctrl_task", TASK_STACKSIZE, NULL,LOADCTRL_TASK_PRIORITY,NULL);
	xTaskCreate(maintenance_task, "maintenance_task", TASK_STACKSIZE, NULL,MAINTENANCE_TASK_PRIORITY, NULL);
	xTaskCreate(switch_polling_task, "switch_polling_task", TASK_STACKSIZE, NULL,SWITCHPOLLING_TASK, NULL);
	xTaskCreate(vga_display_task, "vga_display_task", TASK_STACKSIZE, NULL,VGADISPLAY_TASK_PRIORITY, NULL);
	return 0;
} */

int main()
{
	Q_freq_data = xQueueCreate( 100, sizeof(double) );
	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay);
	xTaskCreate( PRVGADraw_Task, "DrawTsk", configMINIMAL_STACK_SIZE, NULL, PRVGADraw_Task_P, &PRVGADraw );
	xTaskCreate( PGFlash_Task, "0", configMINIMAL_STACK_SIZE, NULL, PGFlash_Task_P, &PGFlash );
	vTaskStartScheduler();
	vTaskStartScheduler();

	while(1)

  return 0;
}

